package site.metacoding.bubble.ex08;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

/**
 * 
 * @author jaewon 목적 : 버블 발사하기 (충돌감지는 안함!) 수평발사
 *
 */

// main을 가진 클래스는 해당 프로그램의 컨텍스트(문맥)를 다 알고 있다.
// 모든게 main에서 시작(new)하니까 뿌리를 다 알고있기 때문
// 따라서 main을 가진 클래스를 컨텍스트라고 부른다.
public class BubbleFrame extends JFrame/* implements BubbleContext */ {

   // 사용할 때는 BubbleFrame으로 다운캐스팅하여 사용해야함
   // private BubbleContext context = this; // BubbleFrame의 heap 주소
   // player가 new될 때 넘겨주면 됨 그래야 context에 접근해 버블 add 가능
   private BubbleFrame context = this;

   private JLabel backgroundMap;
   private Player player; // JLabel

   public Player getPlayer() {
      return player;
   }

   public void setPlayer(Player player) {
      this.player = player;
   }

   public BubbleFrame() {
      initObject();
      initSetting();
      initListener();
      initService(); // 리스너 바로뒤에 써주면 좋음
      setVisible(true); // 내부에 paintComponent() 호출 코드가 있다.

      // 테스트
      // new BackgroundMapService(player);
   }

   // new 하는 것
   private void initObject() {
      backgroundMap = new JLabel(new ImageIcon("image/backgroundMap.png"));
      setContentPane(backgroundMap); // 백그라운드 화면 설정

      player = new Player(context); // 플레이어 추가
      add(player); // Frame에 추가
   }

   private void initService() {
      new Thread(new BackgroundMapService(player)).start();
   }

   // 각종 모든 세팅
   private void initSetting() {
      setSize(1000, 640);
      getContentPane().setLayout(null); // null을 줘야 absolute 레이아웃이 됨
      setLocationRelativeTo(null); // 가운데 배치
      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // x버튼 클릭시 JVM 같이 종료하기
   }

   // 키보드
   private void initListener() {
      addKeyListener(new KeyListener() {

         @Override
         public void keyTyped(KeyEvent e) {

         }

         @Override
         public void keyReleased(KeyEvent e) { // 누른걸 떼면
            // System.out.println("키보드 릴리즈");

            if (e.getKeyCode() == KeyEvent.VK_RIGHT) { // int니까 ==으로 비교
               // isRight를 false
               player.setRight(false);
            } else if (e.getKeyCode() == KeyEvent.VK_LEFT) {
               // isLeft를 false
               player.setLeft(false);
            }
         }

         // 조이스틱
         @Override
         public void keyPressed(KeyEvent e) { // 누르면
            // 왼 37, 오 39, 위 38, 아래 40
            // System.out.println("키보드 프레스 : " + e.getKeyCode());

            // 그러기 위해선 누르고 있는지 누르고 있지 않은지 확인하는 상태 변수가 필요하다.
            if (e.getKeyCode() == KeyEvent.VK_RIGHT) { // int니까 ==으로 비교
               // 키보드를 누르고 있는 동안 right() 메서드는 한번만 실행하고 싶다.
               if (!player.isRight() && player.isRightWallCrash() == false) { // == false 와 같음
                  player.right(); // 이동은 플레이어의 책임
               }
            } else if (e.getKeyCode() == KeyEvent.VK_LEFT) {
               if (!player.isLeft() && player.isLeftWallCrash() == false) {
                  player.left();
               }
            } else if (e.getKeyCode() == KeyEvent.VK_UP) { // if 자체를 막으면 이벤트 루프 등록을 안함
               // System.out.println("체크");
               if (!player.isUp() && !player.isDown()) {
                  player.up(); // 메서드 내부에서 if 분기 처리는 이벤트 루프에 등록은 되는데 실행이 안되는 것
               }
            } else package site.metacoding.bubble.ex08;

import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 * 
 * @author jaewon 플레이어는 좌우이동이 가능하다. 점프가 가능하다. 방울 발사를 한다.(나중에 생각하자) x, y 좌표 필요
 *         x좌표로 좌우 이동 y좌표로 점프
 *
 */

public class Player extends JLabel {

   // 컴포지션
   private BubbleFrame context;

   private int x;
   private int y;

   private ImageIcon playerR; // 오른쪽을 보고있는 pR
   private ImageIcon playerL; // 왼쪽을 보고있는 pL

   // 플레이어 방향의 상태는 아님
   // 이동의 상태임!
   private boolean isRight; // 보통 boolean 변수 이름에는 is가 붙음
   private boolean isLeft;
   // private boolean isJump; // 점프 상태(up, down)
   private boolean up;
   private boolean down;

   private boolean leftWallCrash; // 왼쪽 벽에 부딪힌 상태
   private boolean rightWallCrash; // 오른쪽 벽에 부딪힌 상태

   private static final int JUMPSPEED = 2;
   private static final int SPEED = 4;

   public boolean isUp() {
      return up;
   }

   public void setUp(boolean up) {
      this.up = up;
   }

   public boolean isDown() {
      return down;
   }

   public void setDown(boolean down) {
      this.down = down;
   }

   public boolean isLeftWallCrash() {
      return leftWallCrash;
   }

   public void setLeftWallCrash(boolean leftWallCrash) {
      this.leftWallCrash = leftWallCrash;
   }

   public boolean isRightWallCrash() {
      return rightWallCrash;
   }

   public void setRightWallCrash(boolean rightWallCrash) {
      this.rightWallCrash = rightWallCrash;
   }

   // 자바의 특징 : is가 붙은 boolean 변수는 getIsRight가 아닌 isRight라고 이름이 붙음
   public boolean isRight() {
      return isRight;
   }

   // 자바의 특징 : is가 붙은 boolean 변수는 setIsRight가 아닌 setRight라고 이름이 붙음
   public void setRight(boolean isRight) {
      this.isRight = isRight;
   }

   public boolean isLeft() {
      return isLeft;
   }

   public void setLeft(boolean isLeft) {
      this.isLeft = isLeft;
   }

   public Player(BubbleFrame context) {
      this.context = context;
      initObject();
      initSetting();
   }

   private void initObject() {
      playerR = new ImageIcon("image/playerR.png");
      playerL = new ImageIcon("image/playerL.png");
   }

   // 생성자에서 초기화, 생성자에서 호출되어있으니까 얘도 생성자 !
   private void initSetting() {
      x = 70;
      y = 535;
      setIcon(playerR);
      setSize(50, 50);
      setLocation(x, y); // paintComponent 호출해줌, 부분 새로고침

      isRight = false;
      isLeft = false;
      up = false;
      down = false;

      leftWallCrash = false;
      rightWallCrash = false;
   }

   public void attack() {
      // 1. 버블 new
      // 의존성 주입
      Bubble bubble = new Bubble(context); // JLabel
      // 2. 버블 화면에 붙여야함 이건 JFrame에서 해야하는데?
      // JFrame과 의존해야함!
      context.add(풍선껌);
      // 3. 버블은 여러개니까 컬렉션에 담아둬야함(지금안함)
      // 4. 수평 이동(플레이어 방향대로)
   }

   // 하나의 단일 책임을 가진 메서드, 메서드 모듈
   public void right() {
      isRight = true;
      // leftWallCrash = false;

      System.out.println("오른쪽 이동");

      setIcon(playerR);

      new Thread(() -> {
         while (isRight) {
            x = x + SPEED;
            setLocation(x, y);
            try {
               Thread.sleep(10);
            } catch (Exception e) {
               e.printStackTrace();
            }
         }
      }).start();

   }

   // 외부에서 호출 가능하게
   public void left() {
      isLeft = true;
      // rightWallCrash = false;

      System.out.println("왼쪽 이동");

      setIcon(playerL);

      new Thread(() -> {
         while (isLeft) {
            x = x - SPEED;
            setLocation(x, y);
            try {
               Thread.sleep(10);
            } catch (Exception e) {
               e.printStackTrace();
            }
         }
      }).start();

   }

   // 키보드 윗방향키
   // up() down() 메서드 나누기!
   public void up() {
      up = true;

      System.out.println("위로 업");
      // 점프는 for문을 돌려야함
      // up 이때는 sleep(5), down 이때는 sleep(3)
      new Thread(() -> {
         // up
         for (int i = 0; i < 130 / JUMPSPEED; i++) { // JUMPSPEED에 따라 높이가 달라지면 안됨!
            y = y - JUMPSPEED;
            setLocation(x, y);
            // up = true; // 더블점프 안됨 ! 키보드 입력을 한번만 받아야해

            try {
               Thread.sleep(5);
            } catch (Exception e) {
               e.printStackTrace();
            }
         }
         up = false; // 무조건 스레드 안에 !!
         down();
      }).start();

   }

   // 점프하지 않았을 때도 다운해야하기 때문에 분리시킴
   // 낙하
   public void down() {
      down = true;

      System.out.println("아래로 다운");
      // 점프는 for문을 돌려야함
      // up 이때는 sleep(5), down 이때는 sleep(3)
      new Thread(() -> {
         // down
         // while로 바닥에 떨어지기
         while (down) {
            y = y + JUMPSPEED;
            setLocation(x, y);

            try {
               Thread.sleep(3);
            } catch (Exception e) {
               e.printStackTrace();
            }
         }
         // down = false; //는 down()메서드에서 제어 불가능
      }).start();

   }
}if (e.getKeyCode() == KeyEvent.VK_SPACE) {
               // 버블을 쏘는 것은 Player의 책임
               // Bubble bubble = new Bubble();
               // add(풍선껌); 여기다 만들면 안됨!! 플레이어의 책임임 !!
               player.attack();
            }
         }
      });
   }

   public static void main(String[] args) {
      new BubbleFrame();
   }

}