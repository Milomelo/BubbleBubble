package site.metacoding.bubble.ex09;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;

import javax.imageio.ImageIO;

// 백그라운드 서비스 (독립적인 스레드로 돌려야 한다)
public class BackgroundMapService implements Runnable {

	// 컴포지션
	private BufferedImage image;
	private Bubble bubble;

	// 컴포지션을 위한 기술 => 의존성 주입 (생성자를 통해서 주입) = DI (Dependency Injection)
	public BackgroundMapService(Bubble bubble) {
		this.bubble = bubble;
		
		try {
			// raw 하게 읽는 다는 뜻 : 낡것 그대로 읽는 것
			image = ImageIO.read(new File("image/backgroundMapService.png"));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void run() {
		while (true) {
			// 색상 확인
			Color leftColor = new Color(image.getRGB(bubble.getX() - 10, bubble.getY() + 25));
			Color rightColor = new Color(image.getRGB(bubble.getX() + 50 + 10, bubble.getY() + 25));
			System.out.println("leftColor : "+leftColor);
			System.out.println("rightColor : "+rightColor);
			System.out.println(image.getRGB(bubble.getX(), bubble.getY()+50+5));
		
			
			if (leftColor.getRed() == 255 && leftColor.getGreen() == 0 && leftColor.getBlue() == 0) {
				System.out.println("왼쪽 벽에 충돌함");
				bubble.setLeft(false);
			} else if (rightColor.getRed() == 255 && rightColor.getGreen() == 0 && rightColor.getBlue() == 0) {
				System.out.println("오른쪽 벽에 충돌함");
				bubble.setRight(false);
			} else {
			}

			try {
				Thread.sleep(1); // 10/1000 -> 0.01초
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}

	}
	
}
